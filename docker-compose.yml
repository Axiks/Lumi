services:
  lumi-apiservice-service:
    image: "lumi/apiservice:latest"
    build:
      context: .
      dockerfile: Vanilla.Aspire/Vanilla.Aspire.ApiService/Dockerfile
    environment:
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY: "in_memory"
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: "true"
      HTTP_PORTS: "80"
      DOTNET_ENVIRONMENT: "${DOTNET_ENVIRONMENT}"
      ConnectionStrings__coredb: $COREDB_CONNECTION_STRING
      ConnectionStrings__oauthdb: $OAUTH_CONNECTION_STRING
      ConnectionStrings__lumi-mq: $RABBITMQ_CONNECTION_STRING
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_SERVICE_NAME: "apiservice"
      cdnDomain: $CDN_DOMAIN
    # ports:
    # - target: 80
    #   published: 10000
    restart: unless-stopped
    volumes:
      - ./infrastructure/app/storage:/storage
    networks:
        - lumi-net-dev
    depends_on:
        - "lumi-mq"
        - "lumi-db" 
  
  lumi-webfrontend-service:
    # image: "lumi/webfrontend:latest"
    build:
      context: .
      dockerfile: Vanilla.Aspire/Vanilla.Aspire.Web/Dockerfile
    environment:
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY: "in_memory"
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: "true"
      Kestrel__Endpoints__https__Url: "https://*:8080"
      services__apiservice__http__0: "http://lumi-apiservice-service:80"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_SERVICE_NAME: "webfrontend"
      # ConnectionStrings__apiservice: "https://apiservice:8083"
    ports:
    - target: 8080
      published: 10002
    restart: unless-stopped
    networks:
        - lumi-net-dev
    depends_on:
        - "lumi-apiservice-service"
  
  lumi-telegrambot-service:
    # image: "lumi/telegrambot:latest"
    build:
      context: .
      dockerfile: Vanilla.TelegramBot/Dockerfile
    environment:
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY: "in_memory"
      DOTNET_ENVIRONMENT: "${DOTNET_ENVIRONMENT}"
      ConnectionStrings__coredb: $COREDB_CONNECTION_STRING
      ConnectionStrings__oauthdb: $OAUTH_CONNECTION_STRING
      ConnectionStrings__tgbotdb: $TGBOT_CONNECTION_STRING
      ConnectionStrings__lumi-mq: $RABBITMQ_CONNECTION_STRING
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_SERVICE_NAME: "telegrambot"
      domain: $WEB_DOMAIN
      cdnDomain: $CDN_DOMAIN
      botAccessToken: $BOT_ACCESS_TOKEN
      botAdminTgId: $BOT_ADMIN_TG_ID
      provisionBonusApiUrl: $PROVISION_BONUS_API_DOMAIN
      provisionBonusApiAccessToken: $PROVISION_BONUS_API_ACCESS_TOKEN
      tokenPrivateKey: ${TOKEN_PRIVATE_KEY}
      tokenLifetimeSec: $TOKEN_LIFETIME_SEC
      tokenIssuer: ${TOKEN_ISSUER}
      tokenAudience: ${TOKEN_AUDIENCE}
    ports:
    - target: 8080
      published: 10008
    restart: unless-stopped
    volumes:
      - ./infrastructure/app/storage:/app/storage
      - ./infrastructure/app/applog:/app/AppLog
    networks:
        - lumi-net-dev
    depends_on:
        - "lumi-mq"
        - "lumi-db"
  
  lumi-db:
    image: postgres:latest
    # ports:
    #   - "5434:5432"
    restart: always
    volumes:
      - ./infrastructure/postgres/data:/var/lib/postgresql/data
      - ./infrastructure/postgres/pgconf:/etc/postgresql
      - ./infrastructure/postgres/pglog:/var/log/postgresql
    environment:
        POSTGRES_DB: $DB_NAME
        POSTGRES_USER: $DB_USERNAME
        POSTGRES_PASSWORD: $DB_PASSWORD
    networks:
        - lumi-net-dev

  lumi-mq:
    image: rabbitmq:4.0.0-management
    # ports:
    #   # - 5672:5672
    #   - 15672:15672
    volumes:
      - ./infrastructure/rabbitmq_data:/var/lib/rabbitmq
    environment:
        RABBITMQ_DEFAULT_USER: $RABBITMQ_DEFAULT_USER
        RABBITMQ_DEFAULT_PASS: $RABBITMQ_DEFAULT_PASS
    networks:
        - lumi-net-dev

  lumi-tunnel:
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}
    networks:
        - lumi-net-dev

  # aspire-dashboard:
  #   image: "mcr.microsoft.com/dotnet/aspire-dashboard:9.0"
  #   # profiles: [development]
  #   environment:
  #     DOTNET_DASHBOARD_UNSECURED_ALLOW_ANONYMOUS: "true"
  #   ports:
  #   - target: 18888
  #   restart: unless-stopped
  #   networks:
  #       - lumi-net-dev

  otel-collector:
    container_name: otelcollector
    image: otel/opentelemetry-collector-contrib:latest
    command: [ --config=/etc/otel-collector-config.yml ]
    volumes:
      - ./config/otel-collector-config.yml:/etc/otel-collector-config.yml
    depends_on:
      - prometheus
      - loki
      # - tempo
    # ports:
    #   - "4317:4317" # OTLP gRPC receiver
    #   - "4318:4318" # OTLP http receiver
      #   - 1888:1888 # pprof extension
      # - 8888:8888 # Prometheus metrics exposed by the collector for itself
      # - 8889:8889 # Prometheus exporter metrics for applications
      #   - 13133:13133 # health_check extension      
      #   - 55679:55679 # zpages extension
    networks:
        - lumi-net-dev

  prometheus:
    image: prom/prometheus
    volumes:
      # - ./config/prometheus/etc:/etc/prometheus/:rw
      - ./infrastructure/prometheus/prometheus_data:/prometheus:rw
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
    ports:
      - 9090:9090
    user: "${UID}:${GID}"
    networks:
      - lumi-net-dev
    restart: always



  grafana:
    image: grafana/grafana
    volumes:
      - ./infrastructure/grafana/grafana-storage/:/var/lib/grafana:rw
      # - ./grafana/home:/usr/share/grafana
      - ./infrastructure/grafana/logs:/var/log/grafana:rw
      - ./infrastructure/grafana/lib/:/var/lib/grafana:rw
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      # - GF_AUTH_ANONYMOUS_ENABLED=true
      # - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    user: "${UID}:${GID}"
    ports:
      - "3018:3000"
    depends_on:
      - prometheus
    networks:
      - lumi-net-dev

  jaeger:
    image: jaegertracing/all-in-one
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - 6831:6831/udp
      # - 6832:6832/udp
      # - 5778:5778
      - 16686:16686
      - 14268:14268
      # - 14269:14269
      # - 14250:14250
      # - 9411:9411
      # - 4317:4317
      # - 4318:4318
    networks:
      - lumi-net-dev

  loki:
    image: grafana/loki:2.9.2
    # ports:
    #   - "3100:3100"
    volumes:
      - ./infrastructure/loki/loki-data:/loki/
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
        - lumi-net-dev

networks:
 lumi-net-dev:
    driver: bridge